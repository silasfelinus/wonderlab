Hi, ChatGPT! I'm Silas. I have a vue.js project. 
I need your help completing my code.
I'm building a gui development lab that I can use to develop future tools. 
I have the following structure and I'm trying to follow best practices.
This is what I have so far:

[Project_id]
Widget Wonderlab

[INTENT]
A single-screen Vue web app designed to provide a modern, sleek, fast, and friendly sandbox to save, load, share, and create WonderWidgets.

[Dev Environment]
Ubuntu 22, Visual Studio Code, Chrome

[INSTALLED MODULES]
Vue 3, TypeScript, SCSS, Vuex, Vue-Draggable, Quasar

[PRINCIPLES]
Material Design, Composition API

[FRONT-END]
Header fixed at top
patrially-collapsile Sidebar on right
ChatWindow on left
below ChatWindow, left Footer is stopped by Sidebar
centered of screen, square WonderLab
centered inside Wonderlab, Button


[Structure: Material Design]
Component:Desired Effects

./src/components/Header.vue: Fixed at the top, provides the ability to save/load lab states, create new widgets, manage user login, and toggle night mode.
./src/components/Sidebar.vue: Partially-collapsible, contains a variety of drag-and-droppable Material Design icons to activate options within widgets and the lab. 
./src/components/Footer.vue: Displays copyright information.
./src/components/ChatWindow.vue: Partially-collapsible component on the left side for user interaction.
./src/components/WonderLab.vue: A grid-based workspace for building, saving, and sharing WonderWidgets, utilizing a step-based save system for easy progress tracking
./src/components/WonderWidget.vue: GUI-abstracted programmed-API calls to language processing APIs, featuring at least one input_grommet, output_grommet, and data display.

[Sidebar Icons]
new_text_input, new_text_display, new_image_input, new_image_output, new_robot, new_drop_down_bar,new_microphone, new_speaker, new_cables, new_widget, new_garbage_shed, new_button



[Key Intended Features]
Draggable and resizable components such as text fields, drop-down selections, and data display
User-friendly drag-and-drop sorting.
Step-Based Save System
Impressive, functional, modern interface


[Supported File Types] 
txt, yaml, json, jpg, png.


[CONFIGURED FILES]
./src/styles/main.scss
./src/styles/variables.scss
./src/shims-vue.d.ts
./src/store.ts
./.gitignore
./jsconfig.json
./package-lock.json
./package.json
./README.md
./tsconfig.jsonvue.config.js
./public/index.html
./main.ts
./styles/variables.scss

[NOTES]
Use code to visually represent components
All configured files are available as needed, ask if you are unclear of the structure.
All colors should reference their preset variable in variables.scss


[COLORS VARIABLES]
$color-primary, $color-secondary, $color-tertiary, $color-quaternary, $color-light, $color-accent

[BUILT COMPONENTS]
App.vue
Header.vue
SideBar.vue

[EMPTY COMPONENTS]
./src/components/: Button.vue, ChatWindow.vue, Footer.vue, TextInput.vue, Wonderlab.vue, WonderWidget.vue


I'm including [main.ts][App.vue][Header.vue] to establish a beginning chain of programming and practices:
[#./main.ts]
import { createApp } from 'vue';
import App from './App.vue';
import store from './store';
import './styles/main.scss';
import { Quasar } from 'quasar';
import 'quasar/dist/quasar.css';

const app = createApp(App);
app.use(store);
app.use(Quasar);
app.mount('#app');

import { createApp } from 'vue';
import App from './App.vue';
import store from './store';
import './styles/main.scss';
import { Quasar } from 'quasar';
import 'quasar/dist/quasar.css';

const app = createApp(App);
app.use(store);
app.use(Quasar);
app.mount('#app');


[./src/App.vue]
<template>
  <q-layout>
    <Header />
    <q-page-container>
      <ChatWindow />
      <WonderLab />
      <Footer />
    </q-page-container>
    <Sidebar />
  </q-layout>
</template>

<script lang="ts">
import { defineComponent } from 'vue';
import Header from './components/Header.vue';
import Sidebar from './components/Sidebar.vue';
import Footer from './components/Footer.vue';
import ChatWindow from './components/ChatWindow.vue';
import WonderLab from './components/WonderLab.vue';

export default defineComponent({
  components: {
    Header,
    Sidebar,
    Footer,
    ChatWindow,
    WonderLab,
  },
});
</script>

[./src/components/Header.vue]
<template>
  <q-header>
    <q-toolbar>
      <q-toolbar-title>Widget Wonderlab</q-toolbar-title>
      <q-space />
      <q-btn flat @click="saveLab" label="Save" icon="save" />
      <q-btn flat @click="loadLab" label="Load" icon="folder_open" />
      <q-btn flat @click="createNewWidget" label="New Widget" icon="add" />
      <q-btn flat @click="toggleNightMode" icon="brightness_4" />
      <q-btn flat @click="userLogin" label="Login" icon="person" />
    </q-toolbar>
  </q-header>
</template>

<script lang="ts">
import { defineComponent } from 'vue';

export default defineComponent({
  methods: {
    saveLab() {
      // Implement save lab functionality
      console.log('Save Lab');
    },
    loadLab() {
      // Implement load lab functionality
      console.log('Load Lab');
    },
    createNewWidget() {
      // Implement create new widget functionality
      console.log('Create New Widget');
    },
    toggleNightMode() {
      // Implement night mode toggle functionality
      console.log('Toggle Night Mode');
    },
    userLogin() {
      // Implement user login functionality
      console.log('User Login');
    },
  },
});
</script>

[CURRENT TASKS]
Sidebar.vue: Create a partially-collapsible sidebar with Material Design icons that represent each of the options you mentioned (new_text_input, new_text_display, etc.). Use Quasar's q-drawer component to create the sidebar, and include the icons using q-icon component with the respective icon names from Material Icons.

ChatWindow.vue: Create a partially-collapsible chat window on the left side of the screen. You can use Quasar's q-drawer component again, with a different position setting, and include a chat interface using q-chat-message and q-input components.

Footer.vue: Create a simple footer that displays copyright information. You can use Quasar's q-footer component and place a q-toolbar-title with the copyright text inside.

WonderLab.vue: Implement a grid-based workspace for building, saving, and sharing WonderWidgets. You can use Quasar's q-grid component, and include draggable and resizable features using Vue-Draggable.

WonderWidget.vue: Create the main WonderWidget component that includes at least one input_grommet, output_grommet, and data display. This component will be the basis for all the widgets created within the WonderLab.

For the additional components like Button.vue, TextInput.vue, etc., you can create basic structures using Quasar's components (e.g., q-btn, q-input, and others) and customize them based on our needs.

I'll take assistance plugging in the correct code into each section, feel free to stop at appropriate time, I can copy-paste from the previous messages.