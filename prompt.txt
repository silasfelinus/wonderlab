Hi, ChatGPT! I'm Silas. I have a vue.js project. 
I need your help completing my code.
I'm building a gui development lab that I can use to develop future tools. 
I have the following structure and I'm trying to follow best practices.
This is what I have so far:

[Project_id]
Widget Wonderlab

[INTENT]
A single-screen Vue web app designed to provide a modern, sleek, fast, and friendly sandbox to save, load, share, and create WonderWidgets.

[Dev Environment]
Ubuntu 22, Visual Studio Code, Chrome

[INSTALLED MODULES]
Vue 3, TypeScript, SCSS, Vuex, Vue-Draggable, Quasar

[PRINCIPLES]
Material Design, Composition API

[FRONT-END]
HeaderWidget fixed at top
patrially-collapsile SideWidget on right
ChatWidget on left
below ChatWidget, left FooterWidget is stopped SideWidget
centered of screen, square WonderLab
centered inside Wonderlab, ButtonWidget

[Structure: Material Design]
Component:Desired Effects

./src/components/HeaderWidget.vue: Fixed at the top, provides the ability to save/load lab states, create new widgets, manage user login, and toggle night mode.
./src/componenSideWidget.vue: Partially-collapsible, contains a variety of drag-and-droppable Material Design icons to activate options within widgets and the lab. 
./src/components/FooterWidget.vue: Displays copyright information.
./src/components/ChatWidget.vue: Partially-collapsible component on the left side for user interaction.
./src/components/WonderLab.vue: A grid-based workspace for building, saving, and sharing WonderWidgets, utilizing a step-based save system for easy progress tracking
./src/components/WonderWidget.vue: GUI-abstracted programmed-API calls to language processing APIs, featuring at least one input_grommet, output_grommet, and data display.SideWidget Icons]
new_text_input, new_text_display, new_image_input, new_image_output, new_robot, new_drop_down_bar,new_microphone, new_speaker, new_cables, new_widget, new_garbage_shed, new_ButtonWidget


[Key Intended Features]
Draggable and resizable components such as text fields, drop-down selections, and data display
User-friendly drag-and-drop sorting.
Step-Based Save System
Impressive, functional, modern interface


[Supported File Types] 
txt, yaml, json, jpg, png.


[CONFIGURED FILES]
./src/styles/main.scss
./src/styles/variables.scss
./src/shims-vue.d.ts
./src/store.ts
./.gitignore
./jsconfig.json
./package-lock.json
./package.json
./README.md
./tsconfig.jsonvue.config.js
./public/index.html
./main.ts

[NOTES]
Use code to visually represent components
All configured files are available as needed, ask if you are unclear of the structure.
All colors should reference their preset variable in variables.scss


[COLOR VARIABLES]
$color-primary, $color-secondary, $color-tertiary, $color-quaternary, $color-light, $color-accent

[BUILT COMPONENTS WITH EMPTY FUNCTIONS]
App.vue
./src/components/: HeaderWidget.vue, SideWidget.vue, ButtonWidget.vue, ChatWidget.vue, FooterWidget.vue, TextInput.vue, Wonderlab.vue, WonderWidget.vue


I'm including [main.ts][App.vue][Header.vue] to establish a beginning chain of programming and practices:
[#./main.ts]
import { createApp } from 'vue';
import App from './App.vue';
import store from './store';
import './styles/main.scss';
import { Quasar } from 'quasar';
import 'quasar/dist/quasar.css';

const app = createApp(App);
app.use(store);
app.use(Quasar);
app.mount('#app');

import { createApp } from 'vue';
import App from './App.vue';
import store from './store';
import './styles/main.scss';
import { Quasar } from 'quasar';
import 'quasar/dist/quasar.css';

const app = createApp(App);
app.use(store);
app.use(Quasar);
app.mount('#app');


[./src/App.vue]
<template>
  <q-layout>
    <Header />
    <q-page-container>
      <ChatWidget />
      <WonderLab />
      <FooterWidget />
    </q-page-container>SideWidget />
  </q-layout>
</template>

<script lang="ts">
import { defineComponent } from 'vue';
import Header from './components/Header.vue';
impoSideWidget from './componenSideWidget.vue';
import FooterWidget from './components/FooterWidget.vue';
import ChatWidget from './components/ChatWidget.vue';
import WonderLab from './components/WonderLab.vue';

export default defineComponent({
  components: {
    HeaderSideWidget,
    FooterWidget,
    ChatWidget,
    WonderLab,
  },
});
</script>

[./src/components/Header.vue]
<template>
  <q-header>
    <q-toolbar>
      <q-toolbar-title>Widget Wonderlab</q-toolbar-title>
      <q-space />
      <q-btn flat @click="saveLab" label="Save" icon="save" />
      <q-btn flat @click="loadLab" label="Load" icon="folder_open" />
      <q-btn flat @click="createNewWidget" label="New Widget" icon="add" />
      <q-btn flat @click="toggleNightMode" icon="brightness_4" />
      <q-btn flat @click="userLogin" label="Login" icon="person" />
    </q-toolbar>
  </q-header>
</template>

<script lang="ts">
import { defineComponent } from 'vue';

export default defineComponent({
  methods: {
    saveLab() {
      // Implement save lab functionality
      console.log('Save Lab');
    },
    loadLab() {
      // Implement load lab functionality
      console.log('Load Lab');
    },
    createNewWidget() {
      // Implement create new widget functionality
      console.log('Create New Widget');
    },
    toggleNightMode() {
      // Implement night mode toggle functionality
      console.log('Toggle Night Mode');
    },
    userLogin() {
      // Implement user login functionality
      console.log('User Login');
    },
  },
});
</script>

[CURRENT TASKS]
Implement draggable and resizable functionality for WonderWidgets in WonderLab.vue:

You can use the Vue-Draggable library to make the widgets draggable. Update the widgets array in WonderLab.vue to include position data (x and y coordinates) for each widget.
Add the Vue-Draggable component in WonderLab.vue to wrap the wonder-widget components.
Update the WonderWidget.vue component's style to make it resizable.
Implement the actions associated with the sidebar icons in Sidebar.vue:

Each icon should have a click event listener that triggers a specific function.
Implement functions for each icon action, such as creating new widgets, adding new input/output elements, etc.
Implement saving and loading lab states in Header.vue:

Implement functions to save and load the lab state (widgets, positions, settings, etc.) to/from supported file types (txt, yaml, json).
Implement user login functionality in Header.vue:

Add a login form using Quasar's q-dialog and q-form components.
Implement authentication logic for user login.
Implement night mode functionality in Header.vue:

Add a night mode theme to your SCSS files (e.g., dark versions of your color variables).
Toggle between light and dark themes when the user clicks the night mode button.
Implement input and output connections in WonderWidget.vue:

Add input and output elements (grommets) for each widget, and style them accordingly.
Implement connection logic between input and output grommets of different widgets.
Add Quasar components to enhance the user interface:

Use q-tooltip




I'll take assistance plugging in the correct code into each section, feel free to stop at appropriate time, I can copy-paste from the previous messages.